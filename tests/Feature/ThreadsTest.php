<?php

namespace Tests\Feature;

use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;


class ThreadsTest extends TestCase
{
    use RefreshDatabase;
    /**
     * A basic feature test example.
     *
     * @return void
     */

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->thread=factory('App\Thread')->create();
    }

    public function testExample()
    {
        $response = $this->get('/');

        $response->assertStatus(200);
    }

    public function testa_user_can_browse_threads(){
        $this->withoutExceptionHandling();
        $response = $this->get('/threads');
        $response->assertSee($this->thread->title);
        //$response->assertStatus(200);

    }

    /**
     * @test
     */

    public function a_user_can_read_thread(){
       // dd($this->thread->path());
        $response = $this->get($this->thread->path());
        $response->assertSee($this->thread->title);
    }

    public function testa_user_read_assc_replies_thread(){
        $this->withoutExceptionHandling();
        //Create a Reply from thread
       $reply= factory('App\Reply')->create(['thread_id'=>$this->thread->id]);

        //When we visit thread
        $response=$this->get($this->thread->path());
        $this->assertDatabaseHas('replies', ['body' => $reply->body]);
        //dd($reply->body);
       // ->assertSee($reply->body);
        //then we should see replies
    }

    /**
     * @test
     */

    public function a_user_can_filter_threads_acc_to_channel(){
        $this->withoutExceptionHandling();
        $channel=create('App\Channel');
        $threadInChannel=create('App\Thread',['channel_id'=>$channel->id]);
        $threadNotInChannel=create('App\Thread');
        $this->get('/threads/'.$channel->slug)
            ->assertSee($threadInChannel->title)
            ->assertDontSee($threadNotInChannel->title);
    }

    /**
     * @test
     */

    public  function  a_user_filter_by_username(){
        $this->withoutExceptionHandling();
        $this->signIn(create('App\User',['name'=>'Isai Hills']));
        $theadByIsa=create('App\Thread',['user_id'=>auth()->id()]);
        $threadNotByIsa=create('App\Thread');
        $this->get('/threads?by=Isai Hills')
            ->assertSee($theadByIsa->title)
            ->assertDontSee($threadNotByIsa->title);

    }

    /** @test */
    function a_user_can_filter_threads_by_popularity()
    {
        $threadWithTwoReplies = create('App\Thread');
        create('App\Reply', ['thread_id' => $threadWithTwoReplies->id], 2);
        $threadWithThreeReplies = create('App\Thread');
        create('App\Reply', ['thread_id' => $threadWithThreeReplies->id], 3);
        $threadWithNoReplies = $this->thread;
        $response = $this->getJson('threads?popular=1')->json();
        $this->assertEquals([3, 2, 0], array_column($response, 'replies_count'));
    }

    /**
     * @test
     */
    function a_usr_can_filter_threads_thts_unanswered(){

        $thread = create('App\Thread');
        create('App\Reply', ['thread_id' => $thread->id]);
        $response = $this->getJson('threads?unanswered=1')->json();

        $this->assertCount(1, $response);

    }

    /**
     * @test
     */

    function user_can_get_all_replies_from_thread(){
        $thread = create('App\Thread');
        create('App\Reply', ['thread_id' => $thread->id]);
        $response=$this->getJson($thread->path()."/replies")->json();
        //dd($response);
        $this->assertCount(1, $response['data']);
    }


}
