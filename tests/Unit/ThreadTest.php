<?php

namespace Tests\Unit;

use App\Notifications\ThreadWasUpdated;
use Carbon\Carbon;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Support\Facades\Notification;
use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;

class ThreadTest extends TestCase
{


use DatabaseMigrations;


    protected $thread;

    public  function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->thread=factory('App\Thread')->create();
    }

    public  function testthread_has_replies(){

        $this->assertInstanceOf('Illuminate\Database\Eloquent\Collection',$this->thread->replies);
    }

    /**
     * @test
     */
    public function a_thread_has_creator(){
        $this->assertInstanceOf('App\User',$this->thread->owner);
    }

    /**
     * @test
     */

    public  function  a_thread_can_add_reply(){
        $this->thread->addReply(
            [
                'body'=>'blaf dsgsg',
                'user_id'=>1
            ]);

        $this->assertCount(1,$this->thread->replies);
    }


    /**
     * @test
     */

    function a_thread_notifies_all_reg_subs_when_reply_added(){

        Notification::fake();
        $this->signIn()->
        thread->subscribed()
        ->addReply(
            [
                'body'=>'blaf dsgsg',
                'user_id'=>1
            ]);
        Notification::assertSentTo(auth()->user(),ThreadWasUpdated::class);
    }

    /**
     * @test
     */

    public function a_thread_belongs_to_a_channel(){
        $thread=create('App\Thread');
        $this->assertInstanceOf('App\Channel',$thread->channel);
    }

    /**
     *
     * @test
     */
    public function a_thread_can_make_string_path(){
        $thread=create('App\Thread');
        $this->assertEquals('/threads/'.$thread->channel->slug."/".$thread->id,$thread->path());
    }

    /**
     * @test
     */
        function an_auth_user_can_subscrbe_threads(){
            $thread=create("App\Thread");
            $this->signIn();
            $thread->subscribed();
           // $thread->subscriptions()->where('user_id', auth()->id())->get();
            $this->assertEquals(1,
                $thread->subscriptions()->where('user_id', auth()->id())->count());
        }

        /**
         * @test
         */
        function  a_thread_unsub_from(){
            $thread=create("App\Thread");
            $this->signIn();
            $thread->subscribed();
            $thread->unsubscribed();
            $this->assertCount(0,$thread->subscriptions);
        }

    /**
     * @test
     */
    function it_knows_auth_usr_is_subscribed_to_it(){
        $thread=create("App\Thread");
        $this->signIn();
        $this->assertFalse($thread->isSubscribedTo);
        $thread->subscribed();
        $this->assertTrue($thread->isSubscribedTo);
    }

    /**
     * @test
     */

    function a_thread_can_chk_whthr_all_replies_read(){
        $this->signIn();
        $thread=create("App\Thread");
        tap(auth()->user(),function($user) use ($thread){
            $this->assertTrue($thread->hasUpdatesFor($user));
            auth()->user()->read($thread);
            $this->assertFalse($thread->hasUpdatesFor($user));
        });


    }

}
